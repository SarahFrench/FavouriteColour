{"version":3,"sources":["index.js"],"names":["Background","props","_this","Object","_Users_Sarah_Documents_FavouriteColour_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_Sarah_Documents_FavouriteColour_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_Sarah_Documents_FavouriteColour_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","class","colour","setState","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Input","onClick","changeBackground","React","Component","_this3","gif","message","messageChoices","mode","input","inputIsColour","messageIndex","Math","floor","random","length","colourRegex","RegExp","test","replace","includes","document","getElementById","value","toLowerCase","trim","processInput","newClass","swapStateColourAndGif","removeGif","noInput","getSpecificGiphy","getGiphy","updateMessage","url","type","fetch","then","response","blob","text","catch","e","console","log","remove","window","alert","_this4","concat","fetchAndDecode","json","JSON","parse","imageSelection","data","images","downsized","element","src","id","appendChild","_this5","original","_this6","useInput","ReactDOM","render"],"mappings":"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","file":"static/js/main.18576e7f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Background extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      class: 'd-flex flex-row align-items-center justify-content-center background white',\n    }\n  }\n\n  changeBackground(colour){\n    this.setState({\n      class: 'd-flex flex-row align-items-center justify-content-center background ' + colour,\n    })\n  }\n\n  render() {\n    return <div className={this.state.class}>\n                < Input onClick={(colour) => this.changeBackground(colour)} />\n           </div>\n  }\n}\n\nclass Input extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      colour: true,\n      gif: false,\n      message: \"C'mon, don't be shy\",\n      messageChoices: [\"That's a great choice!\", \"Really, <colour>? I expected better from you\", \"Yeah, <colour> is ok I guess\", \"That's my favourite too!\", \"Well, I liked <colour> before it was cool.\"]\n    }\n  }\n\n  swapStateColourAndGif(mode){\n    switch (mode) {\n      case 'gif':\n        this.setState({\n          colour: false,\n          gif: true,\n        });\n        break;\n      case 'colour':\n        this.setState({\n          colour: true,\n          gif: false,\n        });\n      default:\n        this.setState({\n          colour: true,\n          gif: false,\n        })\n    }\n  }\n\n  updateMessage(input){\n    if (this.inputIsColour(input)){\n      let messageIndex = Math.floor(Math.random() * this.state.messageChoices.length)\n      let message = this.state.messageChoices[messageIndex]\n      let colourRegex = RegExp('<colour>', 'g')\n      if (colourRegex.test(message)){\n        message = message.replace(colourRegex, input)\n      }\n      this.state.message = message;\n    } else {\n      this.state.message = `Yeah. That isn't a colour. Here's a GIF for your trouble though.`\n    }\n  }\n\n  inputIsColour(input){\n    let acceptedColours = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'pink', 'black', 'grey', 'gray', 'white']\n    return acceptedColours.includes(input);\n  }\n\n  processInput(){\n    let input = document.getElementById('input').value;\n    input = input.toLowerCase().trim();\n    return input;\n  }\n\n  useInput(){\n    let input = this.processInput()\n    let newClass = ''\n    if (this.inputIsColour(input)){\n      this.swapStateColourAndGif('colour');\n      this.removeGif();\n      newClass = input;\n    } else if (input === '' ) {\n      this.swapStateColourAndGif('gif');\n      this.noInput();\n      this.getSpecificGiphy();\n      newClass = \"white\";\n    } else {\n      this.swapStateColourAndGif('gif');\n      this.getGiphy(input);\n      newClass = \"white\";\n    }\n    this.updateMessage(input);\n    return newClass;\n  }\n\n  fetchAndDecode(url, type) {\n    return fetch(url).then(response => {\n      if (type === 'blob') {\n        return response.blob();\n      } else if (type === 'text') {\n        return response.text();\n      }\n    })\n    .catch(e => {\n      console.log('There has been a problem with your fetch operation: ' + e.message);\n    });\n  }\n\n  removeGif(){\n    if (!!document.getElementById('gif')){\n      document.getElementById('gif').remove();\n    }\n  }\n\n  noInputAlert(){\n    window.alert(\"You didn't type anything in the text box!\");\n  }\n\n  getGiphy(input){\n    var GIPHY_API_KEY ='lDP1N91b3crbFDWjwtQqOHmUCN30SAnq';\n    let url = `https://api.giphy.com/v1/gifs/search?q=${input}&api_key=${GIPHY_API_KEY}`\n    let response = this.fetchAndDecode(url, 'text')\n\n    response\n      .then( response => {\n        let json = JSON.parse(response);\n        let imageSelection = Math.floor(Math.random() * json.data.length)\n        let url = json.data[imageSelection].images.downsized.url\n        let element = document.createElement('img');\n        element.src= url;\n        element.id = 'gif'\n        element.className = 'gif mt-2'\n\n        // remove pre-existing gif if any. Code here so transition fast\n        this.removeGif();\n        document.getElementById('input-box').appendChild(element);\n\n      })\n  }\n\n  getSpecificGiphy(){\n    var GIPHY_API_KEY ='lDP1N91b3crbFDWjwtQqOHmUCN30SAnq';\n    const GIF_ID = 'iB4PoTVka0Xnul7UaC';\n    let url = `https://api.giphy.com/v1/gifs/${GIF_ID}?api_key=${GIPHY_API_KEY}`\n    let response = this.fetchAndDecode(url, 'text')\n\n    response\n      .then( response => {\n        let json = JSON.parse(response);\n        let url = json.data.images.original.url;\n        let element = document.createElement('img');\n        element.src= url;\n        element.id = 'gif'\n        element.className = 'gif mt-2'\n\n        // remove pre-existing gif if any. Code here so transition fast\n        this.removeGif();\n        document.getElementById('input-box').appendChild(element);\n\n      })\n  }\n\n  render(){\n    return <div id=\"input-box\" className=\"box w-50\">\n        <h5 className=\"mb-4\">\n          Tell me your favourite colour:\n        </h5>\n        <div>\n          <input id=\"input\"></input>\n          <button className=\"button\" onClick={() => this.props.onClick(this.useInput())}>Tell me!</button>\n        </div>\n        <div className=\"mt-2\">\n          {this.state.message}\n        </div>\n      </div>\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Background />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}